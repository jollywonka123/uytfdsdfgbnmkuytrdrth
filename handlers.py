import requests
from main import bot, dp, sql1, db1, sql2, db2, sql3, db3
from config import admins, chanel_id
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from keyboards.inline import rules, zayavka, accept_rules, ref, send_zayavka, accepted, service, okey, inform, choose_service, cheta
from keyboards.callback_datas import ref_callback, paypal_callback
from aiogram.dispatcher import FSMContext
from states import Join_team, Make_r, New_payment, Increase, Paint, Dob_schet, Dob_paypal, Del_schet, Del_paypal
from keyboards.default import admin_panel, worker_panel, upr_sch
from keyboards.callback_datas import accept_callback, service_callback, okey_callback, iban_callback
from PIL import Image, ImageDraw, ImageFont

async def on_startup(dp):
    for i in admins:
        await bot.send_message(chat_id=i, text='<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>')

@dp.message_handler(Command('start'))
async def command_start(message: Message):
    sql1.execute(f"SELECT chatid FROM users WHERE chatid = '{message.chat.id}'")
    if sql1.fetchone() is None:
        sql1.execute(f"INSERT INTO users VALUES(?,?,?,?,?)", (message.chat.id, message.from_user.username, 0, 0, 50))
        db1.commit()
    for k in sql1.execute(f'SELECT status FROM users WHERE chatid = "{message.chat.id}"'):
        if k[0] == 0:
            await message.answer(text=f'<b>–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –ü–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–∫–∏ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞</b>',reply_markup=rules)
        elif k[0] == 1:
            await message.answer(text='<b>–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>', reply_markup=zayavka)

        elif k[0] == 2:
            await message.answer(text='<b>üîä–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ.</b>')
        elif k[0] == 3:
            await message.answer(text='<b>‚ùó–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ.</b>', reply_markup=worker_panel)
        else:
            await message.answer(text='<b>üö´–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.</b>')

@dp.callback_query_handler(text='rules')
async def ok_rules(call: CallbackQuery):
    await call.answer(cache_time=1)
    db1.commit()
    await call.message.edit_text(text='<b>‚Ä¢ –í–æ—Ä–∫–µ—Ä—ã, –Ω–µ –ø—Ä–æ—è–≤–ª—è—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π, –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã</b>\n'
                                      '<b>‚Ä¢ –í –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω –ª—é–±–æ–π NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç, —Å–ø–∞–º, —Ä–µ–∫–ª–∞–º–∞, –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ, –ª—é–±–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è</b>\n'
                                      '<b>‚Ä¢ –í—ã—è—Å–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–µ —Ç–∞–∫–∂–µ –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –∏ –±—É–¥—É—Ç –ø—Ä–∏—Å–µ–∫–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –õ–°</b>\n'
                                      '<b>‚Ä¢ –¢–° –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –≤—ã–ø–ª–∞—Ç–µ, –µ—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ —Ç–∏–º—ã.</b>', reply_markup=accept_rules)

@dp.callback_query_handler(text='accept_rules')
async def prinat_rules(call: CallbackQuery):
    sql1.execute(f"UPDATE users SET status = 1 WHERE chatid = {call.message.chat.id}")
    db1.commit()
    await call.answer(text='‚úÖ–û–ö')
    await call.message.edit_text(text='<b>–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>', reply_markup=zayavka)

@dp.callback_query_handler(text='zayavka', state=[None, Join_team.Q5])
async def get_zayavka(call: CallbackQuery):
    await call.message.edit_text(text='<b>üí≠–û—Ç–∫—É–¥–∞ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?</b>', reply_markup=ref)
    await Join_team.Q1.set()

@dp.callback_query_handler(ref_callback.filter(), state=Join_team.Q1)
async def lolz_profile(call: CallbackQuery, callback_data: dict, state: FSMContext):
    who = callback_data.get('who')
    await state.update_data(who=who)
    await call.message.edit_text(text='<b>üí≠–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ LOLZTEAM</b>')
    await Join_team.Q2.set()

@dp.message_handler(state=Join_team.Q2)
async def time_work(message: Message, state=FSMContext):
    await state.update_data(lolzteam=message.text)
    await message.answer(text='<b>üí≠–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?</b>')
    await Join_team.Q3.set()

@dp.message_handler(state=Join_team.Q3)
async def opit_work(message: Message, state=FSMContext):
    await state.update_data(time=message.text)
    await message.answer(text='<b>üí≠–ö–∞–∫–æ–≤ –≤–∞—à –æ–ø—ã—Ç –≤ —Å—Ñ–µ—Ä–µ —Å–∫–∞–º–∞? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–π.</b>')
    await Join_team.Q4.set()

@dp.message_handler(state=Join_team.Q4)
async def join_end(message: Message, state=FSMContext):
    data = await state.get_data()
    who = data.get('who')
    lolzteam = data.get('lolzteam')
    time = data.get('time')
    await state.update_data(opit=message.text)
    await message.answer(text=f'<b>üì¢–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: {who}</b>\n'
                              f'<b>üì∫–ü—Ä–æ—Ñ–∏–ª—å LOLZTEAM: {lolzteam}</b>\n'
                              f'<b>‚åö–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å: {time}</b>\n'
                              f'<b>‚ö°–û–ø—ã—Ç: {message.text}</b>', reply_markup=send_zayavka)
    await Join_team.Q5.set()

@dp.callback_query_handler(text='send zayavka', state=Join_team.Q5)
async def send_z(call: CallbackQuery, state=FSMContext):
    await call.message.edit_text(text='<b>üéâ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç.</b>')
    data = await state.get_data()
    who = data.get('who')
    lolzteam = data.get('lolzteam')
    time = data.get('time')
    opit = data.get('opit')
    sql1.execute(f"UPDATE users SET status = 2 WHERE chatid = {call.message.chat.id}")
    db1.commit()
    sql2.execute(f"SELECT chatid FROM zayavka WHERE chatid = '{call.message.chat.id}'")
    if sql2.fetchone() is None:
        sql2.execute(f"INSERT INTO zayavka VALUES(?,?,?,?,?,?)", (call.message.chat.id, call.message.chat.username, who, lolzteam, time, opit))
        db2.commit()
    else:
        sql2.execute(f"DELETE FROM zayavka WHERE chatid = {call.message.chat.id}")
        sql2.execute(f"INSERT INTO zayavka VALUES(?,?,?,?,?,?)", (call.message.chat.id, call.message.chat.username, who, lolzteam, time, opit))
        db2.commit()
    for i in admins:
        await bot.send_message(chat_id=i, text='<b>üîî–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>')
    await state.finish()

@dp.message_handler(Command('admin'))
async def adm_panel(message:Message):
    if message.chat.id in admins:
        await message.answer(text='<b>‚ùó–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ.</b>', reply_markup=admin_panel)
    else:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.')

@dp.message_handler(text='üëÄ–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏')
async def view_zayavki(message: Message):
    if message.chat.id in admins:
        sql2.execute(f"SELECT * FROM zayavka")
        if sql2.fetchone() is None:
            await message.answer(text='<b>üí§–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.</b>')

        else:
            for i in sql2.execute("SELECT * FROM zayavka"):
                accept_zayavka = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text='‚úî–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data=accept_callback.new(action=f'accept', id=f'{i[0]}')),
                        InlineKeyboardButton(text='üóë–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=accept_callback.new(action=f'dont_accept',id=f'{i[0]}'))
                    ]
                ])
                await message.answer(text=f'<b>ID: {i[0]}</b>\n'
                                          f'<b>USERNAME: @{i[1]}</b>\n'
                                          f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                          f'<b>üì¢–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª: {i[2]}</b>\n'
                                          f'<b>üì∫–ü—Ä–æ—Ñ–∏–ª—å LOLZTEAM: {i[3]}</b>\n'
                                          f'<b>‚åö–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å: {i[4]}</b>\n'
                                          f'<b>‚ö°–û–ø—ã—Ç: {i[5]}</b>', reply_markup=accept_zayavka)

@dp.callback_query_handler(accept_callback.filter())
async def viewing_zayavki(call: CallbackQuery, callback_data: dict):
    id = callback_data.get('id')
    action = callback_data.get('action')
    if action == 'accept':
        sql1.execute(f"UPDATE users SET status = 3 WHERE chatid = {id}")
        db1.commit()
        sql2.execute(f"DELETE FROM zayavka WHERE chatid = {id}")
        db2.commit()
        await call.message.edit_text(text='<b>üîî–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞.</b>')
        await bot.send_message(chat_id=id, text='<b>‚ö°–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.‚ö°</b>', reply_markup=accepted)
    else:
        sql2.execute(f"DELETE FROM zayavka WHERE chatid = {id}")
        db2.commit()
        sql1.execute(f"UPDATE users SET status = 4 WHERE chatid = {id}")
        db1.commit()
        await call.message.edit_text(text='<b>üîî–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.</b>')
        await bot.send_message(chat_id=id, text='<b>üòû–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>')

@dp.callback_query_handler(text='menu_work')
async def show_work_menu(call: CallbackQuery):
    await call.message.answer(text='<b>‚ùó–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ.</b>', reply_markup=worker_panel)

@dp.message_handler(text='üí≥–°—á–µ—Ç')
async def schett(message: Message):
    for k in sql1.execute(f'SELECT status FROM users WHERE chatid = "{message.chat.id}"'):
        if k[0] == 3:
            schet_2 = InlineKeyboardMarkup(row_width=1)
            for i in sql3.execute('SELECT info FROM pay WHERE service = "iban"'):
                schet_2.insert(InlineKeyboardButton(text=f'{i[0]}', callback_data=iban_callback.new(act=f'{i[0]}')))
            await message.answer(text='üí≥–°—á–µ—Ç', reply_markup=schet_2)

@dp.callback_query_handler(iban_callback.filter())
async def show_schet(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=1)
    act = callback_data.get('act')
    for i in sql3.execute(f'SELECT payment_details FROM pay WHERE info = "{act}"'):
        await call.message.edit_text(text=f'{i[0]}')

@dp.message_handler(text='üßøPayPal')
async def paypal(message: Message):
    for k in sql1.execute(f'SELECT status FROM users WHERE chatid = "{message.chat.id}"'):
        if k[0] == 3:
            pay_pal = InlineKeyboardMarkup(row_width=1)
            for i in sql3.execute('SELECT info FROM pay WHERE service = "paypal"'):
                pay_pal.insert(InlineKeyboardButton(text=f'{i[0]}', callback_data=paypal_callback.new(act=f'{i[0]}')))
            await message.answer(text='üßøPayPal', reply_markup=pay_pal)

@dp.callback_query_handler(paypal_callback.filter())
async def show_paypal(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=1)
    act = callback_data.get('act')
    for i in sql3.execute(f'SELECT payment_details FROM pay WHERE info = "{act}"'):
        await call.message.edit_text(text=f'{i[0]}')

@dp.message_handler(text='üíº–ü—Ä–æ—Ñ–∏–ª—å')
async def profile_info(message: Message):
    for k in sql1.execute(f'SELECT status FROM users WHERE chatid = "{message.chat.id}"'):
        if k[0] == 3:
            for i in sql1.execute(f'SELECT * FROM users WHERE chatid = "{message.chat.id}"'):
                await message.answer(text=f'<b>üåµID: {message.chat.id}</b>\n'
                                          f'<b>üßäUSERNAME: @{message.chat.username}</b>\n'
                                          f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                          f'<b>üí∞–ó–∞–ª–µ—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É: {i[3]}‚Ç¨</b>\n'
                                          f'<b>üîó–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç: {i[4]}%</b>')

@dp.message_handler(text='üì¢–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', state=None)
async def rassilka(message: Message):
    if message.chat.id in admins:
        await message.answer(text='üíª–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞')
        await Make_r.Q1.set()

@dp.message_handler(state=Make_r.Q1)
async def mk_r(message: Message, state=FSMContext):
    await state.finish()
    await message.answer(text='<b>üìå–í–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏–∫–∞–∫ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º</b>')
    error = 0
    for i in sql1.execute("SELECT chatid FROM users"):
        try:
            await bot.send_message(chat_id=i[0], text=message.text)
        except:
            error += 1
    await message.answer(text=f'<b>üìå–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—å. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {error}</b>')

@dp.message_handler(text='üí∏–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', state=None)
async def new_payment(message: Message):
    if message.chat.id in admins:
        await message.answer(text='<b>üì¶–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å</b>', reply_markup=service)
        await New_payment.Q1.set()

@dp.callback_query_handler(service_callback.filter() ,state=New_payment.Q1)
async def choice_service(call: CallbackQuery, callback_data: dict, state=FSMContext):
    what = callback_data.get('what')
    await state.update_data(what=what)
    await call.answer(f'‚úÖ–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–∏—Å: {what}')
    await call.message.edit_text(text='<b>üìù–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–ª—ë—Ç–∞ –≤ –µ–≤—Ä–æ.</b>')
    await New_payment.Q2.set()

@dp.message_handler(state=New_payment.Q2)
async def sum_zalet(message: Message, state=FSMContext):
    await message.answer(text='<b>üìù–í–≤–µ–¥–∏—Ç–µ ID –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ–∑ CASH.</b>')
    await state.update_data(summ=message.text)
    await New_payment.Q3.set()

@dp.message_handler(state=New_payment.Q3)
async def user_worker(message: Message, state=FSMContext):
    data = await state.get_data()
    what = data.get('what')
    summ = data.get('summ')
    await state.update_data(id=message.text)
    for i in sql1.execute(f'SELECT username FROM users WHERE chatid = "{message.text}"'):
        await message.answer(text=f'<b>üìû–í—Å—ë –≤–µ—Ä–Ω–æ?</b>\n'
                                  f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                  f'<b>‚öôÔ∏è–°–µ—Ä–≤–∏—Å: {what}</b>\n'
                                  f'<b>üíµ–°—É–º–º–∞ –∑–∞–ª—ë—Ç–∞: {summ}‚Ç¨</b>\n'
                                  f'<b>üõ†–í–æ—Ä–∫–µ—Ä: {i[0]}</b>', reply_markup=okey)
    await New_payment.Q4.set()

@dp.callback_query_handler(okey_callback.filter(), state=New_payment.Q4)
async def post_chanel(call: CallbackQuery, callback_data: dict, state=FSMContext):
    await call.answer(cache_time=2)
    action = callback_data.get('act')
    if action == '–î–∞':
        data = await state.get_data()
        what = data.get('what')
        summ = int(data.get('summ'))
        id = data.get('id')
        await state.finish()
        try:
            for i in sql1.execute(f"SELECT * FROM users WHERE chatid = '{id}'"):
                total = int('{:.0f}'.format((summ/100)*float(i[4])))
                print(total)
                sql1.execute(f'UPDATE users SET zalet = zalet + "{total}"')
                await bot.send_message(chat_id=chanel_id, text=f'<b>üè∑–ù–æ–≤—ã–π –∑–∞–ª—ë—Ç!</b>\n'
                                                               f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                                               f'<b>‚öôÔ∏è–°–µ—Ä–≤–∏—Å: {what}</b>\n'
                                                               f'<b>üíµ–°—É–º–º–∞ –∑–∞–ª—ë—Ç–∞: {summ}‚Ç¨</b>\n'
                                                               f'<b>üéö–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {i[4]}%</b>\n'
                                                               f'<b>üõ†–í–æ—Ä–∫–µ—Ä: {i[1]}</b>\n'
                                                               f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                                               f'<b>üí≥–û–∂–∏–¥–∞–µ—Ç—Å—è –∫ –≤—ã–ø–ª–∞—Ç–µ: {total}‚Ç¨</b>')
                await call.message.edit_text(text='üëç–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏')
        except:
            await call.message.answer(text='–û—à–∏–±–∫–∞')


    else:
        await call.message.answer(text='üö´–û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


@dp.message_handler(text='üíπ–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É', state=None)
async def increase_percent(message: Message):
    if message.chat.id in admins:
        await message.answer(text='üí¨–í–≤–µ–¥–∏—Ç–µ ID –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.')
        await Increase.Q1.set()

@dp.message_handler(state=Increase.Q1)
async def how_percent(message: Message, state=FSMContext):
    await state.update_data(id=message.text)
    try:
        for i in sql1.execute(f"SELECT * FROM users WHERE chatid = '{message.text}'"):
            await message.answer(text=f'üåµID: {message.text}\n'
                                      f'üßäUSERNAME: {i[1]}\n'
                                      f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                      f'üßÆ–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {i[4]}%')
    except:
        await message.answer(text='üö´–û—à–∏–±–∫–∞')
        await state.finish()
    await message.answer(text='üè∑–ù–∞ —Å–∫–æ–ª—å–∫–æ % –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É –≤–æ—Ä–∫–µ—Ä–∞?')
    await Increase.Q2.set()

@dp.message_handler(state=Increase.Q2)
async def some_up(message: Message, state=FSMContext):
    data = await state.get_data()
    id = int(data.get('id'))
    how = int(message.text)
    sql1.execute(f"UPDATE users SET percent = percent + {how} WHERE chatid = '{id}'")
    db1.commit()
    for i in sql1.execute(f"SELECT * FROM users WHERE chatid = '{id}'"):
        await message.answer(text=f'üõé–°—Ç–∞–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ {message.text}%. –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ {i[4]}%')
        await bot.send_message(chat_id=id, text=f'üéâ–í—ã—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ {message.text}%\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {i[4]}%')
    await state.finish()

@dp.message_handler(text='üóÇ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message: Message):
    for k in sql1.execute(f'SELECT status FROM users WHERE chatid = "{message.chat.id}"'):
        if k[0] == 3:
            await message.answer(text=f'üìÇINFORMATION\n'
                                      f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                      f'üëë–¢–°—ã: @registerq, @povishe\n'
                                      f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                      f'üìö–ú–∞–Ω—É–∞–ª –ø–æ VINTED (PayPal): <a href="https://telegra.ph/Manual-po-rabote-VINTED-07-07-2">–°–°–´–õ–ö–ê</a>\n'
                                      f'üìö–ú–∞–Ω—É–∞–ª –ø–æ VINTED (IBAN): <a href="https://telegra.ph/Manual-po-rabote-VINTED-07-07-3">–°–°–´–õ–ö–ê</a>\n'
                                      f'üìö–ú–∞–Ω—É–∞–ª –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é DHL —Ç—Ä–µ–∫–µ—Ä–∞: <a href="https://telegra.ph/Sozdaem-DHL-trek-nomer-onlajn-besplatno-07-08">–°–°–´–õ–ö–ê</a>\n'
                                      f'üìö–ú–∞–Ω—É–∞–ª –ø–æ BLaBlaCar: <a href="https://telegra.ph/BlaBlaCar-Scam-EU-PAYPAL-10-07-07">–°–°–´–õ–ö–ê</a>\n', reply_markup=inform, disable_web_page_preview=True)

@dp.message_handler(text='üñº–û—Ç—Ä–∏—Å–æ–≤–∫–∞')
async def otrisovka(message: Message):
    for k in sql1.execute(f'SELECT status FROM users WHERE chatid = "{message.chat.id}"'):
        if k[0] == 3:
            await message.answer(text='üîé–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å.', reply_markup=choose_service)

@dp.callback_query_handler(text='grailed', state=None)
async def grailed(call: CallbackQuery):
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ -> @tlgurbot')
    await Paint.Q1.set()

@dp.message_handler(state=Paint.Q1)
async def get_link(message: Message, state=FSMContext):
    if message.text[:17] == 'https://tlgur.com':
        await state.update_data(link=message.text)
        await message.answer(text='üí¨–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                                  '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                  '–ë—Ä–µ–Ω–¥\n'
                                  '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n'
                                  '–†–∞–∑–º–µ—Ä\n'
                                  '–ò–º—è –∏ –§–∞–º–∏–ª–∏—è\n'
                                  '–£–ª–∏—Ü–∞, –¥–æ–º\n'
                                  '–ì–æ—Ä–æ–¥, —à—Ç–∞—Ç, –∏–Ω–¥–µ–∫—Å\n'
                                  '–®–æ—Ä—Ç–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã\n'
                                  '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –≤ $')
        await Paint.Q2.set()
    else:
        await message.answer(text='üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞')
        await state.finish()

@dp.message_handler(state=Paint.Q2)
async def get_info(message: Message, state=FSMContext):
    await message.answer(text='üë®‚Äçüé®–ù–∞—á–∏–Ω–∞—é —Ä–∏—Å–æ–≤–∞—Ç—å.')
    try:
        data = await state.get_data()
        link = data.get('link')
        await state.finish()
        response = requests.get(link, stream=True).raw
        img = Image.open(response)
        check = Image.open("images/grailed.png")
        num = img.height / 100
        num1 = int('{:d}'.format(int(img.height / num)))
        num2 = int('{:d}'.format(int(img.width / num)))
        img.thumbnail((num2, num1))
        font1 = ImageFont.truetype("fonts\ARLRDBD.TTF", size=15)
        font2 = ImageFont.truetype("fonts\arial.ttf", size=15)
        font3 = ImageFont.truetype("fonts\ARLRDBD.TTF", size=20)
        text_color = (0, 0, 0)
        idraw = ImageDraw.Draw(check)
        level = 1
        for i in message.text.split('\n'):
            if level == 1:
                check.paste(img, (62, 411))
                idraw.text((281, 428), i, text_color, font1)
                idraw.text((281, 476), '"RepReceipt" (GS)', text_color, font2)
            elif level == 2:
                idraw.text((281, 453), i, text_color, font2)
            elif level == 3:
                idraw.text((281, 500), i, text_color, font2)
            elif level == 4:
                idraw.text((499, 428), i, text_color, font1)
            elif level == 5:
                idraw.text((499, 453), i, text_color, font2)
            elif level == 6:
                idraw.text((499, 476), i, text_color, font2)
            elif level == 7:
                idraw.text((499, 500), i, text_color, font2)
            elif level == 8:
                idraw.text((384, 619), f'{i}.00$', text_color, font3)
            level += 1
        check.save('images/ready_img.png')
        with open('images/ready_img.png', 'rb') as photo:
            await message.answer_photo(photo=photo)
    except:
        await message.answer(text='üòê–û—à–∏–±–∫–∞')
        await state.finish()

@dp.message_handler(text='üéØ–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏')
async def upr_schet(message: Message):
    if message.chat.id in admins:
        await message.answer(text='üí¨–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=upr_sch)

@dp.message_handler(text='üß±–î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç')
async def dob_schet(message: Message):
    if message.chat.id in admins:
        await message.answer(text='üí¨–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')
        await Dob_schet.Q1.set()

@dp.message_handler(state=Dob_schet.Q1)
async def dob_schet(message: Message, state=FSMContext):
    await state.update_data(recs=message.text)
    await message.answer(text='üí¨–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ')
    await Dob_schet.Q2.set()

@dp.message_handler(state=Dob_schet.Q2)
async def dob_schet2(message: Message, state=FSMContext):
    data = await state.get_data()
    recs = data.get('recs')
    info = message.text
    await state.finish()
    sql3.execute(f"INSERT INTO pay VALUES(?,?,?)", ('iban', recs, info))
    db3.commit()
    await message.answer(text='‚úÖ–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')

@dp.message_handler(text='üß±–î–æ–±–∞–≤–∏—Ç—å PayPal')
async def dob_paypal(message: Message):
    if message.chat.id in admins:
        await message.answer(text='üí¨–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')
        await Dob_paypal.Q1.set()

@dp.message_handler(state=Dob_paypal.Q1)
async def dob_paypall(message: Message, state=FSMContext):
    await state.update_data(recs=message.text)
    await message.answer(text='üí¨–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ')
    await Dob_paypal.Q2.set()

@dp.message_handler(state=Dob_paypal.Q2)
async def dob_paypal2(message: Message, state=FSMContext):
    data = await state.get_data()
    recs = data.get('recs')
    info = message.text
    await state.finish()
    sql3.execute(f"INSERT INTO pay VALUES(?,?,?)", ('paypal', recs, info))
    db3.commit()
    await message.answer(text='‚úÖPayPal —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')

@dp.message_handler(text='üí£–£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç')
async def dob_schet(message: Message):
    if message.chat.id in admins:
        schet_2 = InlineKeyboardMarkup(row_width=1)
        for i in sql3.execute('SELECT info FROM pay WHERE service = "iban"'):
            schet_2.insert(InlineKeyboardButton(text=f'{i[0]}', callback_data=iban_callback.new(act=f'{i[0]}')))
        await message.answer(text='üí¨–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å', reply_markup=schet_2)
        await Del_schet.Q1.set()

@dp.callback_query_handler(iban_callback.filter(), state=Del_schet.Q1)
async def delete_iban(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    act = callback_data.get('act')
    sql3.execute(f"DELETE FROM pay WHERE info = '{act}'")
    db3.commit()
    await call.message.edit_text(text='ü•∞–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')

@dp.message_handler(text='üí£–£–¥–∞–ª–∏—Ç—å PayPal')
async def delet_paypal(message: Message):
    if message.chat.id in admins:
        pay_pal = InlineKeyboardMarkup(row_width=1)
        for i in sql3.execute('SELECT info FROM pay WHERE service = "paypal"'):
            pay_pal.insert(InlineKeyboardButton(text=f'{i[0]}', callback_data=paypal_callback.new(act=f'{i[0]}')))
        await message.answer(text='üí¨–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å', reply_markup=pay_pal)
        await Del_paypal.Q1.set()

@dp.callback_query_handler(paypal_callback.filter(), state=Del_paypal.Q1)
async def delete_iban(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    act = callback_data.get('act')
    sql3.execute(f"DELETE FROM pay WHERE info = '{act}'")
    db3.commit()
    await call.message.edit_text(text='ü•∞PayPal —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
